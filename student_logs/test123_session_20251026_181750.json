{
  "student_id": "test123",
  "session_id": "J9hQfEGEbD3Fm5ykNP98",
  "session_start": "2025-10-26T18:17:50.218038",
  "activities": [
    {
      "protocol": "BB84",
      "timestamp": "2025-10-26T18:18:16.256523",
      "code": [
        "import random",
        "",
        "class StudentQuantumHost:",
        "",
        "    def __init__(self, name):",
        "        self.name = name",
        "        self.random_bits = []",
        "        self.measurement_bases = []",
        "        self.quantum_states = []",
        "        self.received_bases = []",
        "        self.measurement_outcomes = []",
        "        print(f\"StudentQuantumHost '{self.name}' initialized successfully!\")",
        "",
        "        \"\"\"",
        "        Create a method that accepts an integer parameter specifying the quantity of qubits to prepare.",
        "        Print a message indicating the host is preparing this quantity of qubits.",
        "        Clear and reinitialize three instance lists: one for random bits, one for bases, and one for quantum states.",
        "        For each qubit in the specified quantity:",
        "        - Generate a random bit (0 or 1)",
        "        - Generate a random basis (0 or 1)",
        "        - If basis is 0: encode bit 0 as \"|0⟩\" and bit 1 as \"|1⟩\"",
        "        - If basis is 1: encode bit 0 as \"|+⟩\" and bit 1 as \"|-⟩\"",
        "        - Append the random bit to the first list, the basis to the second list, and the encoded state to the third list",
        "        After processing all qubits, print a message showing how many qubits were prepared.",
        "        Return the list of encoded quantum states.",
        "        \"\"\"",
        "    def bb84_send_qubits(self, num_qubits):",
        "        print(f\"{self.name} is preparing {num_qubits} qubits...\")",
        "        self.random_bits = []",
        "        self.measurement_bases = []",
        "        self.quantum_states = []",
        "",
        "        for _ in range(num_qubits):",
        "            bit = random.randint(0, 1)",
        "            basis = random.randint(0, 1)",
        "",
        "            if basis == 0:",
        "                state = \"|0⟩\" if bit == 0 else \"|1⟩\"",
        "            else:",
        "                state = \"|+⟩\" if bit == 0 else \"|-⟩\"",
        "",
        "            self.random_bits.append(bit)",
        "            self.measurement_bases.append(basis)",
        "            self.quantum_states.append(state)",
        "",
        "        print(f\"{self.name} prepared {len(self.quantum_states)} qubits\")",
        "        return self.quantum_states",
        "",
        ""
      ],
      "output": "",
      "code_length": 1928,
      "line_count": 49
    }
  ],
  "firebase_enabled": true,
  "last_updated": "2025-10-26T18:18:16.256558"
}